import{execa as t,execaSync as o}from"execa";import i from"rimraf";import e from"copy";import{cwd as r,chdir as s}from"node:process";import n from"node:fs";import c from"node:readline";import{stat as a}from"node:fs/promises";import m from"node:path";import l from"ora";const d=m.resolve();let u=l("");const{stdout:p}=await t("git",["symbolic-ref","--short","-q","HEAD"]),g=t=>{console.log(`请切换到${t}分支进行打包。\nPlease checkout ${t} for release build.`),o("exit",[1])},f=async({branch:c,npmScript:l,customCommit:g,debug:f,dist:$,shortCommitHash:b})=>{const h=async({removeBuildDir:t=!1}={})=>{const e=()=>{try{s(d),o("git",["worktree","remove","-f","-f",c]),o("git",["worktree","prune"]),console.log("build临时目录已删除\n")}catch(t){}finally{i("build")}};if(f)!t&&e();else try{await a(m.join(d,`build/${c}`)),e()}catch(t){}};process.on("SIGINT",process.exit).on("uncaughtException",(t=>{u.fail((f?"调试":"打包或部署")+"意外退出，遇到以下问题：\n"),console.log(t),process.exit()})).on("exit",(()=>{h({removeBuildDir:!0}),o("exit",[1])})),u.text=`开始${f?"调试":"打包部署"}...`,u.start();try{await a(m.join(d,"build"))}catch(t){o("mkdir",["build"]),f&&(u.text=`已在${r()}下建立临时目录build\n`)}finally{await h();const{stdout:o}=await t("git",["worktree","add","-B",c,`build/${c}`,`origin/${c}`]);console.log(o);n.readdirSync(`build/${c}`).forEach((t=>".git"!==t&&i(`build/${c}/${t}`)))}u.text=`正在运行打包脚本... npm run ${l}`;const{stdout:y,stderr:w}=await t("npm",["run",l]);console.log(w+"\n",y);e([`${$}/`,`${$}/**/*`],`build/${c}`,{flatten:!1},(async()=>{s(`build/${c}`),f&&(console.log(`\ngit操作前的工作目录${r()}`),n.readdir(`build/${c}`,((t,o)=>{console.log(o)}))),u.text="打包完成，准备git发布";const{stdout:i}=await(e=p,t("git",["rev-parse",...b?["--short"]:[],e]));var e;if(g)var a=g({branch:c,currentSrcBranch:p});const m=`built by [ ${a||`srcBranch:${p}`} ] [ latest-src-commit:${i} ]`;if(o("git",["add","-A"]),o("git",["commit","-m",m]),f)return void u.succeed(`调试完成，${g?`因开启了customCommit，本次自定义提交信息为${m}`:""}调试模式下不会推送代码，请查看本地${c}分支的记录进行验证。`);const{stdout:l}=await t("git",["push","-f","origin",c]);console.log("\n以下文件被修改",l),u.succeed(`代码推送成功，本次推送的git提交信息为：${m}，打包分支为${c}`)}))};function $({branch:t="release",dist:o="dist",master:i="master",debug:e=!1,npmScript:r,customCommit:s=null,shortCommitHash:n=!0}){if(console.log("[43m%s[0m",`当前运行模式为：${e?"【 调试（打包后不推送) 】":"【 完全（打包后推送） 】"},如需改成${e?"完整":"调试（打包后不推送）"}模式，请将debug参数设置为${e?"false":"true"}\n`),"string"==typeof t)return i&&i!==p?void g(i):void f({branch:t,npmScript:r,customCommit:s,shortCommitHash:n,debug:e,dist:o});const a=[];for(const o in t)a.push(`${o}.${t[o].name}`);let m=c.createInterface({input:process.stdin,output:process.stdout});console.log("所有的构建分支(all packaging branches)：\n"+a.join("\n")),m.question("请选择一个构建分支（序号）：\n",(async o=>{if(t[o].master&&t[o].master!==p)return g(t[o].master),void m.close();console.log("您选择了：",t[o].name+"分支\n"),await f({branch:t[o].name,dist:t[o].dist||"dist",npmScript:t[o].npmScript,customCommit:s,debug:e,shortCommitHash:n}),m.close()}))}export{$ as default};
