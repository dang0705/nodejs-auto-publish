import{execa as t,execaSync as o}from"execa";import r from"copy";import{cwd as e,chdir as s}from"node:process";import i from"node:fs";import n from"node:readline";import{stat as c}from"node:fs/promises";import a from"node:path";import m from"ora";import l from"rimraf";const d=a.resolve();let u=m("");const{stdout:p}=await t("git",["symbolic-ref","--short","-q","HEAD"]),g=t=>{console.log(`请切换到${t}分支进行打包。\nPlease checkout ${t} for release build.`),o("exit",[1])},f=async({branch:n,npmScript:m,customCommit:g,debug:f,dist:$,shortCommitHash:b})=>{const h={async add(){const{stdout:o}=await t("git",["worktree","add","-B",n,`build/${n}`,`origin/${n}`]);return o},exists(){const{stdout:t}=o("git",["worktree","list"]);return t.split("\n").some((t=>t.substring(t.indexOf("[")+1,t.indexOf("]"))===n))},clear(t=null){s(d);const r=()=>{try{o("git",["worktree","remove","-f","-f",n]),o("git",["worktree","prune"]),i.rmdir("./build",(o=>{o&&console.log(o),t&&t()}))}catch(t){}};f?t||r():this.exists()&&r()}};process.on("SIGINT",process.exit).on("uncaughtException",(t=>{u.fail((f?"调试":"打包或部署")+"意外退出，遇到以下问题：\n"),console.log(t),process.exit()})).on("exit",(()=>h.clear((()=>process.kill())))),u.text=`开始${f?"调试":"打包部署"}...`,u.start();try{await c(a.join(d,"build"))}catch(t){i.mkdir("build",(()=>f&&(u.text=`已在${e()}下建立临时目录build\n`)))}finally{await h.clear(),console.log(await h.add());i.readdirSync(`build/${n}`).forEach((t=>".git"!==t&&l(`build/${n}/${t}`)))}u.text=`正在运行打包脚本... npm run ${m}`;const{stdout:x,stderr:w}=await t("npm",["run",m]);console.log(w+"\n",x),r([`${$}/`,`${$}/**/*`],`build/${n}`,{flatten:!1},(async()=>{s(`build/${n}`),u.text="打包完成，准备git发布",f&&(console.log(`\n已将下列文件从打包目录 ${$} 移至发布目录 build/${n}：\n`),i.readdir(`build/${n}`,((t,o)=>console.log(o))));const{stdout:r}=await(e=p,t("git",["rev-parse",...b?["--short"]:[],e]));var e;const c=`built by [ ${g?g({branch:n,currentSrcBranch:p}):`srcBranch:${p}`} ] [ latest-src-commit: ${r} ]`;o("git",["add","-A"]),o("git",["commit","-m",c]),f?u.succeed(`调试完成，${g?`因开启了customCommit，本次自定义提交信息为${c}`:""}调试模式下不会推送代码，请查看本地${n}分支的记录进行验证。`):(t("git",["push","-f","origin",n]),u.succeed(`代码推送成功，本次推送的git提交信息为：${c}，打包分支为${n}`))}))};function $({branch:t="release",dist:o="dist",master:r="master",debug:e=!1,npmScript:s,customCommit:i=null,shortCommitHash:c=!0}){if(console.log("[43m%s[0m",`当前运行模式为：${e?"【 调试（打包后不推送) 】":"【 正常（打包后推送） 】"},如需改成${e?"完整":"调试（打包后不推送）"}模式，请将debug参数设置为${e?"false":"true"}\n`),"string"==typeof t)return r&&r!==p?void g(r):void f({branch:t,npmScript:s,customCommit:i,shortCommitHash:c,debug:e,dist:o});const a=[];for(const o in t)a.push(`${o}.${t[o].name}`);let m=n.createInterface({input:process.stdin,output:process.stdout});console.log("所有的构建分支(all packaging branches)：\n"+a.join("\n")),m.question("请选择一个构建分支（序号）：\n",(async o=>{if(t[o].master&&t[o].master!==p)return g(t[o].master),void m.close();console.log("您选择了：",t[o].name+"分支\n"),await f({branch:t[o].name,dist:t[o].dist||"dist",npmScript:t[o].npmScript,customCommit:i,debug:e,shortCommitHash:c}),m.close()}))}export{$ as default};
