import{execaSync as t,execa as o}from"execa";import{cwd as r,chdir as e}from"node:process";import i from"node:readline";import{stat as s}from"node:fs/promises";import n from"node:path";import c from"ora";const m=n.resolve();let a=c("");const u=async({branch:i,master:c,npmScript:u,customCommit:l,debug:d,dist:p,shortCommitHash:g})=>{const f=({removeBuildDir:o=!1}={})=>{try{e(m),t("git",["worktree","remove","-f","-f",i]),t("git",["worktree","prune"]),o&&(t("rm",["-rf","build"]),d&&console.log("build临时目录已删除\n"))}catch(t){}},{stdout:h}=await o("git",["symbolic-ref","--short","-q","HEAD"]);if(process.on("SIGINT",process.exit).on("uncaughtException",(t=>{a.fail((d?"调试":"打包或部署")+"意外退出，遇到以下问题：\n"),console.log(t),process.exit()})).on("exit",(()=>{f({removeBuildDir:!0}),t("exit",[1])})),c&&c!==h)return console.log(`请切换到 ${c} 分支后再进行打包。`),void t("exit",[1]);a.text=`开始${d?"调试":"打包部署"}...`,a.start();try{await s(n.join(m,"build"))}catch(o){t("mkdir",["build"]),d&&(a.text=`已在${r()}下建立临时目录build\n`)}finally{f();const{stdout:r}=await o("git",["worktree","add","-B",i,`build/${i}`,`origin/${i}`]);console.log(r),e(`build/${i}`),t("rm",["-rf","*"]),e(m)}a.text=`正在运行打包脚本... npm run ${u}`;const{stdout:$,stderr:b}=await o("npm",["run",u]);console.log(b+"\n",$),t("cp",["-rf",`${p}/*`,`build/${i}`]),e(`build/${i}`),d&&console.log(`git操作前的工作目录${r()}`),a.text="打包完成，准备git发布";const{stdout:x}=await(v=h,o("git",["rev-parse",...g?["--short"]:[],v]));var v;if(l)var w=l({branch:i,currentSrcBranch:h});const C=`built by [ ${w||`srcBranch:${h}`} ] [ commit-hash:${x} ]`;if(t("git",["add","-A"]),t("git",["commit","-m",C]),d)return void a.succeed(`调试完成，${l?`因开启了customCommit，本次自定义提交信息为${C}`:""}调试模式下不会推送代码，请查看本地${i}分支的记录进行验证。`);const{stdout:y}=t("git",["push","-f","origin",i]);console.log(y),a.succeed(`代码推送成功，本次推送的git提交信息为：${C}，打包分支为${i}`)};function l({branch:t="release",dist:o="dist",master:r="master",debug:e=!1,npmScript:s,customCommit:n=null,shortCommitHash:c=!0}){if(console.log("[43m%s[0m",`当前运行模式为：${e?"【 调试（打包后不推送) 】":"【 完全（打包后推送） 】"},如需改成${e?"完全":"调试（打包后不推送）"}模式，请将debug参数设置为${e?"false":"true"}\n`),"string"==typeof t)return void u({branch:t,master:r,npmScript:s,customCommit:n,shortCommitHash:c,debug:e,dist:o});const m=[];for(const o in t)m.push(`${o}.${t[o].name}`);let a=i.createInterface({input:process.stdin,output:process.stdout});console.log("所有的构建分支(all packaging branches)：\n"+m.join("\n")),a.question("请选择一个构建分支（序号）：\n",(async o=>{console.log("您选择了：",t[o].name+"分支\n"),await u({branch:t[o].name,dist:t[o].dist||"dist",npmScript:t[o].npmScript,master:r,customCommit:n,debug:e,shortCommitHash:c}),a.close()}))}export{l as default};
