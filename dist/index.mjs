import{execa as t,execaSync as o}from"execa";import{cwd as e,chdir as r}from"node:process";import i from"node:readline";import{stat as s}from"node:fs/promises";import n from"node:path";import c from"ora";const m=n.resolve();let a=c("");const{stdout:l}=await t("git",["symbolic-ref","--short","-q","HEAD"]),u=t=>{console.log(`Please checkout ${t} for release build.`),o("exit",[1])},d=async({branch:i,master:c,npmScript:d,customCommit:p,debug:g,dist:f,shortCommitHash:h})=>{const b=({removeBuildDir:t=!1}={})=>{try{r(m),o("git",["worktree","remove","-f","-f",i]),o("git",["worktree","prune"]),t&&(o("rm",["-rf","build"]),g&&console.log("build临时目录已删除\n"))}catch(t){}};if(process.on("SIGINT",process.exit).on("uncaughtException",(t=>{a.fail((g?"调试":"打包或部署")+"意外退出，遇到以下问题：\n"),console.log(t),process.exit()})).on("exit",(()=>{b({removeBuildDir:!0}),o("exit",[1])})),c&&c!==l)return void u(c);a.text=`开始${g?"调试":"打包部署"}...`,a.start();try{await s(n.join(m,"build"))}catch(t){o("mkdir",["build"]),g&&(a.text=`已在${e()}下建立临时目录build\n`)}finally{b();const{stdout:e}=await t("git",["worktree","add","-B",i,`build/${i}`,`origin/${i}`]);console.log(e),r(`build/${i}`),o("rm",["-rf","*"]),r(m)}a.text=`正在运行打包脚本... npm run ${d}`;const{stdout:$,stderr:x}=await t("npm",["run",d]);console.log(x+"\n",$),o("cp",["-rf",`${f}/*`,`build/${i}`]),r(`build/${i}`),g&&console.log(`git操作前的工作目录${e()}`),a.text="打包完成，准备git发布";const{stdout:v}=await(w=l,t("git",["rev-parse",...h?["--short"]:[],w]));var w;if(p)var C=p({branch:i,currentSrcBranch:l});const y=`built by [ ${C||`srcBranch:${l}`} ] [ commit-hash:${v} ]`;if(o("git",["add","-A"]),o("git",["commit","-m",y]),g)return void a.succeed(`调试完成，${p?`因开启了customCommit，本次自定义提交信息为${y}`:""}调试模式下不会推送代码，请查看本地${i}分支的记录进行验证。`);const{stdout:S}=o("git",["push","-f","origin",i]);console.log(S),a.succeed(`代码推送成功，本次推送的git提交信息为：${y}，打包分支为${i}`)};function p({branch:t="release",dist:o="dist",master:e="master",debug:r=!1,npmScript:s,customCommit:n=null,shortCommitHash:c=!0}){if(console.log("[43m%s[0m",`当前运行模式为：${r?"【 调试（打包后不推送) 】":"【 完全（打包后推送） 】"},如需改成${r?"完整":"调试（打包后不推送）"}模式，请将debug参数设置为${r?"false":"true"}\n`),"string"==typeof t)return void d({branch:t,master:e,npmScript:s,customCommit:n,shortCommitHash:c,debug:r,dist:o});const m=[];for(const o in t)m.push(`${o}.${t[o].name}`);let a=i.createInterface({input:process.stdin,output:process.stdout});console.log("所有的构建分支(all packaging branches)：\n"+m.join("\n")),a.question("请选择一个构建分支（序号）：\n",(async o=>{if(t[o].master&&t[o].master!==l)return u(t[o].master),void a.close();console.log("您选择了：",t[o].name+"分支\n"),await d({branch:t[o].name,dist:t[o].dist||"dist",npmScript:t[o].npmScript,customCommit:n,debug:r,shortCommitHash:c}),a.close()}))}export{p as default};
