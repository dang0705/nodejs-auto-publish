import{execaSync as t,execa as o}from"execa";import{cwd as r,chdir as i}from"node:process";import e from"node:readline";import{stat as s}from"node:fs/promises";import n from"node:path";import c from"ora";const m=n.resolve();let a=c("");const u=async({branch:e,master:c,npmScript:u,customCommit:d,debug:l,dist:p,shortCommitHash:g})=>{const h=({removeBuildDir:o=!1}={})=>{try{i(m),t("git",["worktree","remove","-f","-f",e]),t("git",["worktree","prune"]),o&&(t("rm",["-rf","build"]),l&&console.log("build临时目录已删除\n"))}catch(t){}},{stdout:f}=await o("git",["symbolic-ref","--short","-q","HEAD"]);if(process.on("SIGINT",process.exit).on("uncaughtException",(t=>{a.fail((l?"调试":"打包或部署")+"意外退出，遇到以下问题：\n"),console.log(t),process.exit()})).on("exit",(()=>{h({removeBuildDir:!0}),t("exit",[1])})),c&&c!==f)return console.log(`请切换到 ${c} 分支后再进行打包。`),void t("exit",[1]);a.text=`开始${l?"调试":"打包部署"}...`,a.start();try{await s(n.join(m,"build"))}catch(o){t("mkdir",["build"]),l&&(a.text=`已在${r()}下建立临时目录build\n`)}finally{h();const{stdout:r}=await o("git",["worktree","add","-B",e,`build/${e}`,`origin/${e}`]);console.log(r),i(`build/${e}`),t("rm",["-rf","*"]),i(m)}a.text=`正在运行打包脚本... npm run ${u}`;const{stdout:b,stderr:$}=await o("npm",["run",u]);console.log($+"\n",b),t("cp",["-rf",`${p}/*`,`build/${e}`]),i(`build/${e}`),l&&console.log(`git操作前的工作目录${r()}`),a.text="打包完成，准备git发布";const{stdout:x}=await(v=f,o("git",["rev-parse",...g?["--short"]:[],v]));var v;if(d)var w=d({branch:e,currentSrcBranch:f});const C=`built by [ ${w||`srcBranch:${f}`} ] [ commit-hash:${x} ]`;if(t("git",["add","-A"]),t("git",["commit","-m",C]),l)return void a.succeed(`调试完成，${d?`因开启了customCommit，本次自定义提交信息为${C}`:""}调试模式下不会推送代码，请查看本地${e}分支的记录进行验证。`);const{stdout:y}=t("git",["push","-f","origin",e]);console.log(y),a.succeed(`代码推送成功，本次推送的git提交信息为：${C}，打包分支为${e}`)};function d({branch:t="release",dist:o="dist",master:r="master",debug:i=!1,npmScript:s,customCommit:n=null,shortCommitHash:c=!0}){if(console.log(`当前运行模式为：${i?"【 调试 】":"【 打包 】"},如需改成调试模式，请将debug参数设置为true`),"string"==typeof t)return void u({branch:t,master:r,npmScript:s,customCommit:n,shortCommitHash:c,debug:i,dist:o});const m=[];for(const o in t)m.push(`${o}.${t[o].name}`);let a=e.createInterface({input:process.stdin,output:process.stdout});console.log("所有的构建分支(all packaging branches)：\n"+m.join("\n")),a.question("请选择一个构建分支（序号）：\n",(async o=>{console.log("您选择了：",t[o].name+"分支\n"),await u({branch:t[o].name,dist:t[o].dist||"dist",npmScript:t[o].npmScript,master:r,customCommit:n,debug:i,shortCommitHash:c}),a.close()}))}export{d as default};
