import{execaSync as t,execa as o}from"execa";import{chdir as e,cwd as r}from"node:process";import s from"node:readline";import{stat as i}from"node:fs/promises";import n from"node:path";import c from"ora";const a=n.resolve();let m=c("");const u=async({appName:s,release:c,master:u,npmScript:p,customCommit:l,debug:d,dist:g,shortCommitHash:f})=>{const h=()=>{try{t("git",["worktree","remove","-f","-f",c]),t("git",["worktree","prune"])}catch(t){}},{stdout:$}=await o("git",["symbolic-ref","--short","-q","HEAD"]);if(process.on("uncaughtException",(t=>{m.fail((d?"调试":"打包或部署")+"意外退出，遇到以下问题：\n"),console.log(t),process.exit()})).on("SIGINT",process.exit).on("exit",(()=>{h(),t("exit",[1])})),u&&u!==$)return console.log(`请切换到 ${u} 分支后再进行打包。`),void t("exit",[1]);m.text=`开始${d?"调试":"打包部署"}...`,m.start();try{await i(n.join(a,"build"))}catch(o){t("mkdir",["build"])}finally{h();const{stdout:r}=await o("git",["worktree","add","-B",c,`build/${c}`,`origin/${c}`]);console.log(r),e(`build/${c}`),t("rm",["-rf","*"]),e(a)}m.text=`正在运行打包脚本... npm run ${p}`;const{stdout:b,stderr:x}=await o("npm",["run",p]);console.log(x+"\n",b);t("cp",["-rf",`${`${g}${s?`/${s}`:""}`}/*`,`build/${c}`]),e(`build/${c}`),d&&console.log(`git三连前的工作目录${r()}`),m.text="打包完成，准备git发布";const{stdout:w}=await(C=$,o("git",["rev-parse",...f?["--short"]:[],C]));var C;if(l)var v=l({release:c,currentSrcBranch:$});const y=`built by [ ${v||`srcBranch:${$}`} ] [ commit-hash:${w} ]`;if(t("git",["add","-A"]),t("git",["commit","-m",y]),d)return void m.succeed(`调试完成，${l?`因开启了customCommit，本次自定义提交信息为${y}`:""}调试模式下不会推送代码，请查看本地${c}分支的记录进行验证。`);const{stdout:S}=t("git",["push","-u","--set-upstream","origin",c]);console.log(S),m.succeed(`代码推送成功，本次推送的git提交信息为：${y}，打包分支为${c}`)};function p({release:t="release",dist:o="dist",master:e="master",debug:r=!1,npmScript:i,customCommit:n=null,shortCommitHash:c=!0}){if("string"==typeof t)return void u({release:t,master:e,npmScript:i,customCommit:n,shortCommitHash:c,debug:r,dist:o});const a=[];for(const o in t)a.push(`${o}.${t[o].branch}`);let m=s.createInterface({input:process.stdin,output:process.stdout});console.log("所有的构建分支：\n"+a.join("\n")),m.question("请选择一个构建分支（序号）：\n",(async s=>{console.log("您选择了：",t[s].branch+"分支\n"),await u({appName:t[s].appName||"",release:t[s].branch,master:e,npmScript:t[s].npmScript,customCommit:n,debug:r,dist:o,shortCommitHash:c}),m.close()}))}export{p as default};
